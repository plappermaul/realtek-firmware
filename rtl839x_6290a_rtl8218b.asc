/*
 * This is the firmware source file for the Realtek RTL839X switches with chip cut
 * A (aka chip id 6290 version A) for or use with octa RTl8218B 1GbE transceivers.
 *
 * Currently only the basic setup sequence is supported. This should be enough to
 * allow for QSGMII SerDes operation. like in most switch models.
 *
 * The most important fields in these sequences are mode & port. They define for
 * what SerDes and what modes the commands will run. While mode denotes a single
 * operation mode, ports defines a binary portmask. E.g.
 *
 * MODE_QSGMII,    0x0001 : Run command when the event is triggered for SerDes 0
 *                          and it is currently set up for QSGMII link mode
 * MODE_ALL,       0x0010 : Run command when the event is triggered for SerDes 4
 *                          and it is currently set up in any link mode
 * MODE_1000BASEX, 0x0300 : Run command when the event is triggered for Serdes 8
 *                          and SerDes 9 and they are currently setup in link
 *                          mode 1000BASEX
 * 
 */

#define EVT_INIT			1
#define EVT_POWER_ON			2
#define EVT_POST_POWER_OFF		3
#define EVT_POST_RESET			4
#define EVT_POST_SET_MODE		5
#define EVT_PRE_POWER_OFF		6
#define EVT_PRE_RESET			7
#define EVT_PRE_SET_MODE		8
#define EVT_SETUP			9

#define OP_MASK				1 /* write <val> with <mask> to register */
#define OP_WAIT				2 /* delay for <val> milliseconds */

#define MODE_ALL			1
#define MODE_OFF			2
#define MODE_HSGMII			3
#define MODE_SGMII			4
#define MODE_QSGMII			5
#define MODE_QUSGMII			6
#define MODE_USXGMII			7
#define MODE_XGMII			8
#define MODE_1000BASEX			9
#define MODE_100BASEX			10
#define MODE_10GBASER			11
#define MODE_2500BASEX			12

EVT_SETUP = {
	/*
	 * EVT_SETUP is triggered during driver probing. All SerDes are shut off
	 * and afterwards the setup sequence is run for each SerDes. With no active
	 * operation mode only MODE_ALL or MODE_OFF commands will be processed.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */

	/* 5g SerDes patch (ports 0-7, 10-11) */
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x11, 0x8000, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x11, 0x7000, 0x1000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x11, 0x0e00, 0x0400, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x11, 0x01c0, 0x00c0, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x16, 0x8000, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x08, 0x0008, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x07, 0x0200, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x07, 0x0100, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x14, 0x0002, 0x0002, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x15, 0xf000, 0xc000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x16, 0x1000, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x18, 0x003f, 0x0006, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x08, 0x0040, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x08, 0x0800, 0x0000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x08, 0xf000, 0x8000, 0 },
	{ MODE_ALL,		0x0cff, OP_MASK, 0x0008, 0x08, 0x0780, 0x0400, 0 },
	/* 5g clock edge (ports 10-11) */
	{ MODE_ALL,		0x0c00, OP_MASK, 0x0000, 0x07, 0x4000, 0x4000, 0 },
	/* 5g full swing (ports 4, 10) */
	{ MODE_ALL,		0x0410, OP_MASK, 0x0008, 0x08, 0xffff, 0x8c6a, 0 },
	/* 10g digital patch (ports 8-9, 12-13) */
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x00, 0xffff, 0x5800, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x01, 0xffff, 0x4000, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000a, 0x02, 0xffff, 0x5400, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000a, 0x02, 0xffff, 0x5000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x03, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x04, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x05, 0xffff, 0x4000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x06, 0xffff, 0x4000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x07, 0xffff, 0xffff, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x08, 0xffff, 0xffff, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x09, 0xffff, 0x806f, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x0a, 0xffff, 0x0004, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x0b, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x0c, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x0d, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x0e, 0xffff, 0x0a00, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x0f, 0xffff, 0x2000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x10, 0xffff, 0xf00e, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000a, 0x11, 0xffff, 0xf04a, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000a, 0x11, 0xffff, 0xfdab, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000a, 0x12, 0xffff, 0x97b3, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000a, 0x12, 0xffff, 0x96ea, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x13, 0xffff, 0x5318, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x14, 0xffff, 0x0f03, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x15, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x16, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x17, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x18, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x19, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1a, 0xffff, 0xffff, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1b, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1c, 0xffff, 0x1203, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1d, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1e, 0xffff, 0xa052, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1f, 0xffff, 0x9a00, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x00, 0xffff, 0x00f5, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0xffff, 0xf000, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x02, 0xffff, 0x41ff, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000b, 0x02, 0xffff, 0x4079, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x03, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x04, 0xffff, 0x39ff, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000b, 0x04, 0xffff, 0x93fa, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x05, 0xffff, 0x3340, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x06, 0xffff, 0x40aa, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000b, 0x06, 0xffff, 0x4280, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x07, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x08, 0xffff, 0x801f, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x09, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x0a, 0xffff, 0x619c, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x0b, 0xffff, 0xffed, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x0c, 0xffff, 0x29ff, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x0d, 0xffff, 0x29ff, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x0e, 0xffff, 0x4e10, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000b, 0x0e, 0xffff, 0x4c50, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x0f, 0xffff, 0x4e10, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000b, 0x0f, 0xffff, 0x4c50, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x10, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x11, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x0000, 0x0c, 0xffff, 0x08ec, 0 },
	{ MODE_ALL,		0x2200, OP_MASK, 0x000b, 0x1f, 0xffff, 0x003f, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x0000, 0x07, 0x4000, 0x4000, 0 },
	/* 10g analog patch (ports 8-9, 12-13) */
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x09, 0xffff, 0x417f, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1c, 0x0200, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1c, 0x1c00, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1c, 0x0038, 0x0028, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1c, 0x01c0, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1c, 0x0007, 0x0002, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0xffff, 0xc440, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x06, 0x0008, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x05, 0xffff, 0x8000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x06, 0xffff, 0x8000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x0a, 0xffff, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1e, 0xffff, 0x0002, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1f, 0xffff, 0xbe00, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x0e, 0x0400, 0x0000, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x0f, 0x0400, 0x0000, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x0e, 0x4000, 0x0000, 0 },
	{ MODE_ALL,		0x1100, OP_MASK, 0x000b, 0x0f, 0x4000, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x10, 0x0020, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x09, 0x0100, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x03, 0xf000, 0xf000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1f, 0x3000, 0x3000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1f, 0x0e00, 0x0e00, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x8000, 0x8000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x4000, 0x4000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x2000, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x1000, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x0e00, 0x0400, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x01c0, 0x0080, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x0038, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x01, 0x0007, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x0c, 0x0200, 0x0200, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x0d, 0x0200, 0x0200, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x08, 0x0020, 0x0020, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000b, 0x08, 0x0040, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x1c, 0x8000, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x10, 0xf000, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x13, 0x0010, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x13, 0x0200, 0x0000, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x13, 0x000f, 0x0008, 0 },
	{ MODE_ALL,		0x3300, OP_MASK, 0x000a, 0x13, 0x01e0, 0x0100, 0 },
};

EVT_INIT = {
        /*
         * EVT_INIT is triggered when a SerDes is initialized individually by the
	 * init() operation. At the moment the driver does not interfere with the
	 * SerDes and only runs the sequence. Usually no mode is set at that time
	 * and only MODE_ALL or MODE_OFF commands will be processed.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};

EVT_POWER_ON = {
        /* 
         * EVT_POWER_ON is triggerd when a SerDes is powered on individually by the
	 * power_on() operation. Realtek SerDes have no dedicated power on features
	 * but are controlled through mode setting. This event will only run the
	 * sequence and do nothing else.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};

EVT_PRE_SET_MODE ={
        /*
         * EVT_PRE_SET_MODE is triggered BEFORE the operation mode of a SerDes  is
	 * changed by the set_mode() operation. At this moment the SerDes still
	 * has the old mode active. Maybe it is still off. The sequence itself
	 * will run on the NEW operation mode.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};

EVT_POST_SET_MODE = {
        /*
         * EVT_PRE_SET_MODE is triggered AFTER the operation mode of a SerDes
	 * changed by the set_mode() operation. At this moment the SerDes already
	 * has the new mode active. So the sequence will run all actions depending
	 * on the NEW operation mode of the SerDes.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};

EVT_PRE_RESET = {
        /*
         * EVT_PRE_RESET is triggered BEFORE a SerDes is resetted by the reset()
	 * operation. The operation mode will not change afterwards.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};

EVT_POST_RESET = {
        /*
         * EVT_POST_RESET is triggered AFTER a SerDes is resetted by the reset()
	 * operation. The operation has not changed before.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};

EVT_PRE_POWER_OFF = {
        /*
         * EVT_PRE_POWER_OFF is triggered BEFORE a SerDes is shut down by
	 * power_off() operation. After this sequence has run the mode of the
	 * SerDes will be set to inactive mode. 
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};

EVT_POST_POWER_OFF = {
        /*
         * EVT_POST_POWER_OFF is triggered AFTER a SerDes is shut down by
	 * power_off() operation. At this moment the only mode that is taken into
	 * account in the sequence is MODE_ALL.
	 *
	 * ------------------------------------------------------------------------
	 * mode,		ports,  action,  page,   reg,  mask,   value, dummy
	 * ------------------------------------------------------------------------
	 */
};
